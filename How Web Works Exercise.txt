Part One: Solidify Terminology
In your own terms, define the following terms:

What is HTTP? => Hypertext Transfer Protocol. How browsers and servers communicate with eachother. How clients get data from, or send data to, a server

What is a URL? =>  Uniform Resource Locator, a web address for some internet resource

What is DNS? => DNS takes hostnames or human readable URLs and translastes it to the corresponding IP address

What is a query string? The query string allows you to pass key-value pairs into the URL -- key1=value1&key2=value2...

What are two HTTP verbs and how are they different? => GET vs Post. GET - get some data from the server(search forms). POST- send some data to the server(pages that change data on the server)

What is an HTTP request? => involves a method were a client is requesting information or a resource from the server and follows th HTTP protocol

What is an HTTP response? A response from a server to a client that follows the HTTP protocol (eg sending back HTML/CSS/JS/etc)

What is an HTTP header? Give a couple examples of request and response headers you have seen. =>
Headers provide additional information about the request or the response. Here are some examples:
Request headers: Host, User-Agent, Accept, Cookie, Cache-Control
Response headers: Content-Type, Last-Modified, Set-Cookie, Cache-Control

What are the processes that happen when you type “http://somesite.com/some/page.html” into a browser? =>
Your browser “resolves” the name into an IP address using DNS
Your browser makes a request to that IP address, including headers (info about browser, any previous cookies, and other things)
The server sends a response (typically, HTML, with a status code (200 if it was sucessful)
The browser makes a DOM from that HTML, and finds any other resources needed (images, CSS, JavaScript, etc)
The browser makes separate HTTP requests for those resources and receives response from the server for each



